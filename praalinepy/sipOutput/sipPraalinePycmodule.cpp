/*
 * Module code.
 *
 * Generated by SIP 4.16.5 on Wed Dec 09 23:41:25 2015
 */

#include "sipAPIPraalinePy.h"

#line 7 "D:/DEVELOP/Praaline/praalinepy/RealTime.sip"
#include <cmath>
#include "base/RealTime.h"
#line 13 "D:/DEVELOP/Praaline/praalinepy/sipOutput/sipPraalinePycmodule.cpp"

/* Define the strings used by this module. */
const char sipStrings_PraalinePy[] = {
    'f', 'r', 'o', 'm', 'M', 'i', 'l', 'l', 'i', 's', 'e', 'c', 'o', 'n', 'd', 's', 0,
    'f', 'r', 'o', 'm', 'X', 's', 'd', 'D', 'u', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'f', 'r', 'o', 'm', 'N', 'a', 'n', 'o', 's', 'e', 'c', 'o', 'n', 'd', 's', 0,
    'f', 'r', 'a', 'm', 'e', '2', 'R', 'e', 'a', 'l', 'T', 'i', 'm', 'e', 0,
    'r', 'e', 'a', 'l', 'T', 'i', 'm', 'e', '2', 'F', 'r', 'a', 'm', 'e', 0,
    't', 'o', 'X', 's', 'd', 'D', 'u', 'r', 'a', 't', 'i', 'o', 'n', 0,
    't', 'o', 'N', 'a', 'n', 'o', 's', 'e', 'c', 'o', 'n', 'd', 's', 0,
    't', 'o', 'F', 'r', 'a', 'm', 'e', 'T', 'e', 'x', 't', 0,
    'f', 'r', 'o', 'm', 'S', 'e', 'c', 'o', 'n', 'd', 's', 0,
    's', 't', 'd', ':', ':', 's', 't', 'r', 'i', 'n', 'g', 0,
    'f', 'r', 'o', 'm', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'P', 'r', 'a', 'a', 'l', 'i', 'n', 'e', 'P', 'y', 0,
    't', 'o', 'S', 'e', 'c', 'T', 'e', 'x', 't', 0,
    'z', 'e', 'r', 'o', 'T', 'i', 'm', 'e', 0,
    't', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    't', 'o', 'D', 'o', 'u', 'b', 'l', 'e', 0,
    't', 'o', 'T', 'e', 'x', 't', 0,
    'm', 's', 'e', 'c', 0,
    'u', 's', 'e', 'c', 0,
    'n', 's', 'e', 'c', 0,
    'a', 'b', 's', 0,
};


/*
 * This defines each type in this module.
 */
static sipTypeDef *typesTable[] = {
    &sipTypeDef_PraalinePy_RealTime.ctd_base,
    &sipTypeDef_PraalinePy_std_string.mtd_base,
};


/* Define the module's license. */
static sipLicenseDef module_license = {
    "GPL",
    "George Christodoulides",
    "2014",
    "george@mycontent.gr"
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_PraalinePy = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_PraalinePy,
    0,
    0,
    sipStrings_PraalinePy,
    NULL,
    NULL,
    2,
    typesTable,
    NULL,
    0,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    NULL,
    {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    &module_license,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_PraalinePy;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_PraalinePy
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initPraalinePy
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {0, 0, 0, 0}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "PraalinePy",
        NULL,
        -1,
        sip_methods,
        NULL,
        NULL,
        NULL,
        NULL
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_PraalinePy, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_PraalinePy), sip_methods);
#endif

    if (sipModule == NULL)
        SIP_MODULE_RETURN(NULL);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule(SIP_MODULE_NAME);
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>(SIP_MODULE_NAME));
#endif

    if (sip_sipmod == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == NULL || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == NULL || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI_PraalinePy = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, SIP_MODULE_NAME "._C_API"));
#else
    sipAPI_PraalinePy = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI_PraalinePy == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_PraalinePy,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }
    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_PraalinePy,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    SIP_MODULE_RETURN(sipModule);
}
