/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Fri Jan 30 20:08:01 2015
 */

#include "sipAPIPraalinePy.h"

#line 4 "hellosip.sip"
#include "hellosip.h"
#line 12 "./sipPraalinePyHelloSip.cpp"

#line 20 "std_string.sip"
#include <string>
#line 16 "./sipPraalinePyHelloSip.cpp"


extern "C" {static PyObject *meth_HelloSip_reverse(PyObject *, PyObject *);}
static PyObject *meth_HelloSip_reverse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const HelloSip *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_HelloSip, &sipCpp))
        {
            std::string*sipRes;

            sipRes = new std::string(sipCpp->reverse());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HelloSip, sipName_reverse, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_HelloSip(void *, const sipTypeDef *);}
static void *cast_HelloSip(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_HelloSip)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_HelloSip(void *, int);}
static void release_HelloSip(void *sipCppV,int)
{
    delete reinterpret_cast<HelloSip *>(sipCppV);
}


extern "C" {static void dealloc_HelloSip(sipSimpleWrapper *);}
static void dealloc_HelloSip(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_HelloSip(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_HelloSip(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_HelloSip(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    HelloSip *sipCpp = 0;

    {
        const std::string* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_std_string,&a0, &a0State))
        {
            sipCpp = new HelloSip(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            return sipCpp;
        }
    }

    {
        const HelloSip* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_HelloSip, &a0))
        {
            sipCpp = new HelloSip(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_HelloSip[] = {
    {SIP_MLNAME_CAST(sipName_reverse), meth_HelloSip_reverse, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef_PraalinePy_HelloSip = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_HelloSip,
        {0}
    },
    {
        sipNameNr_HelloSip,
        {0, 0, 1},
        1, methods_HelloSip,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_type_HelloSip,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_HelloSip,
    0,
    0,
    0,
    release_HelloSip,
    cast_HelloSip,
    0,
    0,
    0,
    0,
    0,
    0
};
