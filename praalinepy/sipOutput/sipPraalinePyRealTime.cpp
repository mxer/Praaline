/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.17
 */

#include "sipAPIPraalinePy.h"

#line 9 "RealTime.sip"
#include <cmath>
#include "base/RealTime.h"
#line 13 "sipOutput/sipPraalinePyRealTime.cpp"

#line 20 "stdstring.sip"
#include <string>
#line 17 "sipOutput/sipPraalinePyRealTime.cpp"


extern "C" {static PyObject *meth_RealTime_usec(PyObject *, PyObject *);}
static PyObject *meth_RealTime_usec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const RealTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_RealTime, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->usec();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RealTime, sipName_usec, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RealTime_msec(PyObject *, PyObject *);}
static PyObject *meth_RealTime_msec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const RealTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_RealTime, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->msec();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RealTime, sipName_msec, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RealTime_toNanoseconds(PyObject *, PyObject *);}
static PyObject *meth_RealTime_toNanoseconds(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const RealTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_RealTime, &sipCpp))
        {
            PY_LONG_LONG sipRes;

            sipRes = sipCpp->toNanoseconds();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RealTime, sipName_toNanoseconds, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RealTime_fromSeconds(PyObject *, PyObject *);}
static PyObject *meth_RealTime_fromSeconds(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "d", &a0))
        {
            RealTime*sipRes;

            sipRes = new RealTime(RealTime::fromSeconds(a0));

            return sipConvertFromNewType(sipRes,sipType_RealTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RealTime, sipName_fromSeconds, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RealTime_fromMilliseconds(PyObject *, PyObject *);}
static PyObject *meth_RealTime_fromMilliseconds(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            RealTime*sipRes;

            sipRes = new RealTime(RealTime::fromMilliseconds(a0));

            return sipConvertFromNewType(sipRes,sipType_RealTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RealTime, sipName_fromMilliseconds, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RealTime_fromNanoseconds(PyObject *, PyObject *);}
static PyObject *meth_RealTime_fromNanoseconds(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PY_LONG_LONG a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "n", &a0))
        {
            RealTime*sipRes;

            sipRes = new RealTime(RealTime::fromNanoseconds(a0));

            return sipConvertFromNewType(sipRes,sipType_RealTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RealTime, sipName_fromNanoseconds, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RealTime_fromXsdDuration(PyObject *, PyObject *);}
static PyObject *meth_RealTime_fromXsdDuration(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        std::string* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_std_string,&a0, &a0State))
        {
            RealTime*sipRes;

            sipRes = new RealTime(RealTime::fromXsdDuration(*a0));
            sipReleaseType(a0,sipType_std_string,a0State);

            return sipConvertFromNewType(sipRes,sipType_RealTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RealTime, sipName_fromXsdDuration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RealTime_toDouble(PyObject *, PyObject *);}
static PyObject *meth_RealTime_toDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const RealTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_RealTime, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->toDouble();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RealTime, sipName_toDouble, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RealTime_toString(PyObject *, PyObject *);}
static PyObject *meth_RealTime_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 0;
        const RealTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|b", &sipSelf, sipType_RealTime, &sipCpp, &a0))
        {
            std::string*sipRes;

            sipRes = new std::string(sipCpp->toString(a0));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RealTime, sipName_toString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RealTime_fromString(PyObject *, PyObject *);}
static PyObject *meth_RealTime_fromString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        std::string* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_std_string,&a0, &a0State))
        {
            RealTime*sipRes;

            sipRes = new RealTime(RealTime::fromString(*a0));
            sipReleaseType(a0,sipType_std_string,a0State);

            return sipConvertFromNewType(sipRes,sipType_RealTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RealTime, sipName_fromString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RealTime_toText(PyObject *, PyObject *);}
static PyObject *meth_RealTime_toText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 0;
        const RealTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|b", &sipSelf, sipType_RealTime, &sipCpp, &a0))
        {
            std::string*sipRes;

            sipRes = new std::string(sipCpp->toText(a0));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RealTime, sipName_toText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RealTime_toFrameText(PyObject *, PyObject *);}
static PyObject *meth_RealTime_toFrameText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const RealTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_RealTime, &sipCpp, &a0))
        {
            std::string*sipRes;

            sipRes = new std::string(sipCpp->toFrameText(a0));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RealTime, sipName_toFrameText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RealTime_toSecText(PyObject *, PyObject *);}
static PyObject *meth_RealTime_toSecText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const RealTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_RealTime, &sipCpp))
        {
            std::string*sipRes;

            sipRes = new std::string(sipCpp->toSecText());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RealTime, sipName_toSecText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RealTime_toXsdDuration(PyObject *, PyObject *);}
static PyObject *meth_RealTime_toXsdDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const RealTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_RealTime, &sipCpp))
        {
            std::string*sipRes;

            sipRes = new std::string(sipCpp->toXsdDuration());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RealTime, sipName_toXsdDuration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RealTime_realTime2Frame(PyObject *, PyObject *);}
static PyObject *meth_RealTime_realTime2Frame(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const RealTime* a0;
        uint a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9u", sipType_RealTime, &a0, &a1))
        {
            long sipRes;

            sipRes = RealTime::realTime2Frame(*a0,a1);

            return PyLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RealTime, sipName_realTime2Frame, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RealTime_frame2RealTime(PyObject *, PyObject *);}
static PyObject *meth_RealTime_frame2RealTime(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        long a0;
        uint a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "lu", &a0, &a1))
        {
            RealTime*sipRes;

            sipRes = new RealTime(RealTime::frame2RealTime(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_RealTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RealTime, sipName_frame2RealTime, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_RealTime_abs(PyObject *, PyObject *);}
static PyObject *meth_RealTime_abs(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const RealTime* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_RealTime, &a0))
        {
            RealTime*sipRes;

            sipRes = new RealTime(RealTime::abs(*a0));

            return sipConvertFromNewType(sipRes,sipType_RealTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RealTime, sipName_abs, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_RealTime(void *, const sipTypeDef *);}
static void *cast_RealTime(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_RealTime)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_RealTime(void *, int);}
static void release_RealTime(void *sipCppV,int)
{
    delete reinterpret_cast<RealTime *>(sipCppV);
}


extern "C" {static void assign_RealTime(void *, SIP_SSIZE_T, const void *);}
static void assign_RealTime(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<RealTime *>(sipDst)[sipDstIdx] = *reinterpret_cast<const RealTime *>(sipSrc);
}


extern "C" {static void *array_RealTime(SIP_SSIZE_T);}
static void *array_RealTime(SIP_SSIZE_T sipNrElem)
{
    return new RealTime[sipNrElem];
}


extern "C" {static void *copy_RealTime(const void *, SIP_SSIZE_T);}
static void *copy_RealTime(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new RealTime(reinterpret_cast<const RealTime *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_RealTime(sipSimpleWrapper *);}
static void dealloc_RealTime(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_RealTime(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_RealTime(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_RealTime(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    RealTime *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new RealTime();

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "ii", &a0, &a1))
        {
            sipCpp = new RealTime(a0,a1);

            return sipCpp;
        }
    }

    {
        const RealTime* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_RealTime, &a0))
        {
            sipCpp = new RealTime(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_RealTime[] = {
    {SIP_MLNAME_CAST(sipName_abs), meth_RealTime_abs, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_frame2RealTime), meth_RealTime_frame2RealTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromMilliseconds), meth_RealTime_fromMilliseconds, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromNanoseconds), meth_RealTime_fromNanoseconds, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromSeconds), meth_RealTime_fromSeconds, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromString), meth_RealTime_fromString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromXsdDuration), meth_RealTime_fromXsdDuration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_msec), meth_RealTime_msec, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_realTime2Frame), meth_RealTime_realTime2Frame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toDouble), meth_RealTime_toDouble, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toFrameText), meth_RealTime_toFrameText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toNanoseconds), meth_RealTime_toNanoseconds, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toSecText), meth_RealTime_toSecText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toString), meth_RealTime_toString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toText), meth_RealTime_toText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toXsdDuration), meth_RealTime_toXsdDuration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_usec), meth_RealTime_usec, METH_VARARGS, NULL}
};


extern "C" {static PyObject *varget_RealTime_nsec(void *, PyObject *, PyObject *);}
static PyObject *varget_RealTime_nsec(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
    RealTime *sipCpp = reinterpret_cast<RealTime *>(sipSelf);

    sipVal = sipCpp->nsec;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_RealTime_nsec(void *, PyObject *, PyObject *);}
static int varset_RealTime_nsec(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    RealTime *sipCpp = reinterpret_cast<RealTime *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->nsec = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_RealTime_sec(void *, PyObject *, PyObject *);}
static PyObject *varget_RealTime_sec(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
    RealTime *sipCpp = reinterpret_cast<RealTime *>(sipSelf);

    sipVal = sipCpp->sec;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_RealTime_sec(void *, PyObject *, PyObject *);}
static int varset_RealTime_sec(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    RealTime *sipCpp = reinterpret_cast<RealTime *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->sec = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_RealTime_zeroTime(void *, PyObject *, PyObject *);}
static PyObject *varget_RealTime_zeroTime(void *, PyObject *, PyObject *)
{
    static PyObject *sipPy = NULL;
    const RealTime*sipVal;

    if (sipPy)
    {
        Py_INCREF(sipPy);
        return sipPy;
    }

    sipVal = new RealTime(RealTime::zeroTime);

    sipPy = sipConvertFromNewType(const_cast<RealTime *>(sipVal), sipType_RealTime, NULL);
    Py_XINCREF(sipPy);

    return sipPy;
}

sipVariableDef variables_RealTime[] = {
    {InstanceVariable, sipName_nsec, (PyMethodDef *)varget_RealTime_nsec, (PyMethodDef *)varset_RealTime_nsec, NULL, NULL},
    {InstanceVariable, sipName_sec, (PyMethodDef *)varget_RealTime_sec, (PyMethodDef *)varset_RealTime_sec, NULL, NULL},
    {ClassVariable, sipName_zeroTime, (PyMethodDef *)varget_RealTime_zeroTime, NULL, NULL, NULL},
};


sipClassTypeDef sipTypeDef_PraalinePy_RealTime = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_RealTime,
        {0}
    },
    {
        sipNameNr_RealTime,
        {0, 0, 1},
        17, methods_RealTime,
        0, 0,
        3, variables_RealTime,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_type_RealTime,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_RealTime,
    assign_RealTime,
    array_RealTime,
    copy_RealTime,
    release_RealTime,
    cast_RealTime,
    0,
    0,
    0,
    0,
    0,
    0
};
